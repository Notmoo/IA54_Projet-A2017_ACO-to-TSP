/** 
 * 
 */
package com.utbm.ia54.aco

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.nio.file.Path
import io.sarl.core.DefaultContextInteractions
import gui.main_frame.MainFrame
import io.sarl.core.Schedules
import interfaces.ITSPDisplayerCallback
import io.sarl.core.Lifecycle

// XXX remove theses events (placeholders)
event DisplaySolution{
	var nbNodes : short
	var solution : Short[]
	var distance : long
	var isBest : boolean
}

event ClearSolutions{
	var clear_best : boolean
	var clear_normal : boolean	
}

event DisplayNodes {
	var nbNodes : short
}

event ClearNodes

event DisplayerReady

event TspPropertyChanged{
	val property_id : String
	val property_value : String
	
	new(propId : String, propVal : String){
		this.property_id = propId
		this.property_value = propVal
	}
}

event TspInputFile{
	val path : Path
	
	new(path : Path){
		this.path = path
	}
}

event ApplicationClose

//-----------------------------------------
// AGENTS
//-----------------------------------------
/** 
 * @author Notmoo
 * 
 */
agent DisplayerAgent {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle
	
	var gui : MainFrame = null

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "Displayer"
		info("The agent was started.")
		MainFrame.summonGui
		info("Gui has been summoned")
		val task = task("waiting_for_gui_to_init")
		task.every(1000) [
			if (MainFrame.instance !== null) {
				gui = MainFrame.instance
				new DisplayerReady().emit
				gui.addListener(new ITSPDisplayerCallback() {
					def onFileInput(filePath : Path) {
						fireInputFileRequested(filePath)
					}
					
					def onGuiClose {
						fireCloseEvent
					}
					
					def onPropertyChanged(key : String, value : String) {
						fireTspPropertyChangedEvent(key, value)
					}
					
				})
				task.cancel
			}
		]
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("DisplayerAgent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	
	on DisplaySolution{
		gui.displaySolution(occurrence.nbNodes, occurrence.solution, occurrence.distance, occurrence.isBest)
	}
	
	on DisplayNodes{
		gui.displayNodes(occurrence.nbNodes)
	}
	
	on ClearSolutions{
		gui.clearSolutions
	}
	
	on ClearNodes{
		gui.clearNodes
	}
	
	def fireInputFileRequested(filePath : Path){
		new TspInputFile(filePath).emit
	}
	
	def fireTspPropertyChangedEvent(propId : String, propVal : String){
		new TspPropertyChanged(propId, propVal).emit 	
	}
	
	def fireCloseEvent(){
		new ApplicationClose().emit
		killMe
	}
}
