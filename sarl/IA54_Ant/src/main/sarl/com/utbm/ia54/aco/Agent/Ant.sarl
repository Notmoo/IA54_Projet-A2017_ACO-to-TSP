package com.utbm.ia54.aco.Agent

import io.sarl.core.Initialize
import io.sarl.core.Destroy
import io.sarl.core.DefaultContextInteractions
import java.util.UUID
import java.util.Random
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import com.utbm.ia54.aco.TSPPathFinder
import com.utbm.ia54.aco.AntCreated
import com.utbm.ia54.aco.SimpleTSPPathFinder
import com.utbm.ia54.aco.AntFinished
import com.utbm.ia54.aco.ApplicationClose
import com.utbm.ia54.aco.BottleneckTSPPathFinder
import com.utbm.ia54.aco.IterationStart

event change_tsp_version{
	var version_nb : int
}

//-----------------------------------------
//		AGENTS
//-----------------------------------------
agent AntAgent{
	uses DefaultContextInteractions, TSPPathFinder, Lifecycle, Logging
	
	var envUUID : UUID
	
	on Initialize {
		if (!occurrence.parameters.isEmpty) {
			var numAnt = occurrence.parameters.get(0) as Integer
			loggingName = "Ant_" + numAnt.toString
		}
		
		// TODO ajouter un else pour le cas o√π l'init est mal faite
		
		new SimpleTSPPathFinder().setSkill(TSPPathFinder)
		new AntCreated().emit
	}
	
	on Destroy {
		
	}
	
	on IterationStart {
		if(occurrence.idFirstNode!=-1){
			findPath(occurrence.nbNodes, occurrence.env, occurrence.idFirstNode, occurrence.idLastNode).emit[
				it.getUUID === envUUID
			]
			new AntFinished().emit[it.getUUID === occurrence.source.getUUID]
		}else{
			val idFirstNode : short = (new Random().nextInt(occurrence.nbNodes - 1) + 1) as short
			findPath(occurrence.nbNodes, occurrence.env, idFirstNode, occurrence.idLastNode).emit [
				it.getUUID === envUUID
			]
			new AntFinished().emit[it.getUUID === occurrence.source.getUUID]
		}
	}
	
	on ApplicationClose{
		killMe
	}
	
	on change_tsp_version{
		if (occurrence.version_nb === 0) {
			new SimpleTSPPathFinder().setSkill(TSPPathFinder)
		}
		if (occurrence.version_nb === 1) {
			new BottleneckTSPPathFinder().setSkill(TSPPathFinder)
		}
	}
}
