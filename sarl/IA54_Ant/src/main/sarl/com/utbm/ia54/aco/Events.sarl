package com.utbm.ia54.aco

import java.nio.file.Path
import java.util.List
import java.util.Map

event NewEnvironment {
	var env : float[][][]
	var nbNodes : short

	new (e : float[][][], nb : short) {
		env = e
		nbNodes = nb
	}
}

event NewTWEnvironment extends NewEnvironment{
	var timeWindow : Map<Short, List<Pair<Float, Float>>>
	var initialTimeStamp : float

	new (e : float[][][], nb : short, tw : Map<Short, List<Pair<Float, Float>>>, its : float) {
		super(e, nb)
		timeWindow = tw
		initialTimeStamp = its
	}
}

event RequestUpdate

event Updated{
	var env : float[][][]
	var nbNodes : short
	
	new (e : float[][][], nb : short){
		env = e
		nbNodes = nb
	}
}

event TWUpdated extends Updated{
	var timeWindows : Map<Short, List<Pair<Float, Float>>>
	var timeStamp : float

	new (e : float[][][], nb : short, tw : Map<Short, List<Pair<Float, Float>>>, ts : float) {
		super(e, nb)
		timeWindows = tw
		timeStamp = ts
	}
}
/*
 * Event envoyé au ants pour les informer de l'env
 */
 //Version classique de l'événement, utilisée pour les impl les plus courantes
event SimpleIterationStart {
	var nbNodes : short
	var env : float[][][]
	var idFirstNode : short
	var idLastNode : short
	
	new (nb : short, e : float[][][], idFN : short, idLN : short){
		nbNodes = nb;
		env = e
		idFirstNode = idFN
		idLastNode = idLN
		
	}
}

//Version de l'événement destinée aux problèmes avec horaires de livraison (TW -> Time Window)
event TWIterationStart extends SimpleIterationStart{
	var timeWindows : Map<Short, List<Pair<Float, Float>>>
	var initialTimeStamp : float

	new (nb : short, e : float[][][], idFN : short, idLN : short, tw : Map<Short, List<Pair<Float, Float>>>,
		its : float) {
		super(nb, e, idFN, idLN)
		timeWindows = tw
		initialTimeStamp = its
	}
}

event AntCreated

event AntFinished

event ChangeTspVersion {
	var version_nb : int
}

//Event envoyé par l'EnvAgent en réponse à un event AntCreated
//Permet aux AntAgent de connaitre l'UUID de l'EnvAgent

event AntCreatedAck

/* Event à envoyer au displayer
 * bestSolution: défini si la solution est celle de la convergence ou non
 */

event DisplaySolution {
	val nbNodes : short
	val nodes : short[] // liste des noeux classer dans ordre de passage
	val distance : double
	val bestSolution : boolean

	new (nb : short, n : short[], d : double, bs : boolean) {
		nbNodes = nb
		nodes = n
		distance = d
		bestSolution = bs
	}
}

/*
 * Pour l'affichage des nodes
 */
event DisplayNodes{
	val nbNodes : short
	
	new (nb : short){
		nbNodes = nb
	}
}

event ClearNodes

event ClearSolutions

event TspPropertyChanged{
	val property_id : String
	val property_value : String
	
	new (id : String, value : String) {
		property_id = id
		property_value = value
	}
}

event TspInputFile{
	val path : Path
	
	new (p : Path){
		path = p
	}
}

event TspPath{
	val nbNodes : short
	val nodes: short[] //liste des noeux classer dans ordre de passage
	val distance : double	
	
	new (nb : short, n : short[], d : double) {
		nbNodes = nb
		nodes = n
		distance = d
	}
}

event AckSolution

event IterationFinished

event ApplicationClose