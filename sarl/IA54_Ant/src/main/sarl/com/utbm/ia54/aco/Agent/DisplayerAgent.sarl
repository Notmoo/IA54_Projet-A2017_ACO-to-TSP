/** 
 * 
 */
package com.utbm.ia54.aco.Agent

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.nio.file.Path
import io.sarl.core.DefaultContextInteractions
import gui.main_frame.MainFrame
import io.sarl.core.Schedules
import interfaces.ITSPDisplayerCallback
import io.sarl.core.Lifecycle
import com.utbm.ia54.aco.DisplayerReady
import com.utbm.ia54.aco.DisplaySolution
import com.utbm.ia54.aco.DisplayNodes
import com.utbm.ia54.aco.ClearSolutions
import com.utbm.ia54.aco.ClearNodes
import com.utbm.ia54.aco.TspInputFile
import com.utbm.ia54.aco.TspPropertyChanged
import com.utbm.ia54.aco.ApplicationClose

//-----------------------------------------
// AGENTS
//-----------------------------------------
/** 
 * @author Notmoo
 * 
 */
agent DisplayerAgent {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle
	
	var gui : MainFrame = null

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "Displayer"
		info("The agent was started.")
		MainFrame.summonGui
		info("Gui has been summoned")
		val task = task("waiting_for_gui_to_init")
		task.every(1000) [
			if (MainFrame.instance !== null) {
				gui = MainFrame.instance
				new DisplayerReady().emit
				gui.addListener(new ITSPDisplayerCallback() {
					def onFileInput(filePath : Path) {
						fireInputFileRequested(filePath)
					}
					
					def onGuiClose {
						fireCloseEvent
					}
					
					def onPropertyChanged(key : String, value : String) {
						fireTspPropertyChangedEvent(key, value)
					}
				})
				task.cancel
			}
		]
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("DisplayerAgent was stopped.")
	}
	
	on DisplaySolution{
		gui.displaySolution(occurrence.nbNodes, occurrence.nodes, occurrence.distance, occurrence.bestSolution)
	}
	
	on DisplayNodes{
		gui.displayNodes(occurrence.nbNodes)
	}
	
	on ClearSolutions{
		gui.clearSolutions
	}
	
	on ClearNodes{
		gui.clearNodes
	}
	
	def fireInputFileRequested(filePath : Path){
		new TspInputFile(filePath).emit
	}
	
	def fireTspPropertyChangedEvent(propId : String, propVal : String){
		new TspPropertyChanged(propId, propVal).emit 	
	}
	
	def fireCloseEvent(){
		new ApplicationClose().emit
		killMe
	}
}
