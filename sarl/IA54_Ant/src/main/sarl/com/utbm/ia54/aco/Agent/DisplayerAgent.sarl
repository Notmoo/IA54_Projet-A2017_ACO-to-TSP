/** 
 * 
 */
package com.utbm.ia54.aco.Agent

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import java.nio.file.Path
import io.sarl.core.DefaultContextInteractions
import gui.main_frame.MainFrame
import io.sarl.core.Schedules
import interfaces.ITSPDisplayerCallback
import io.sarl.core.Lifecycle
import com.utbm.ia54.aco.DisplayerReady
import com.utbm.ia54.aco.DisplayNodes
import com.utbm.ia54.aco.ClearSolutions
import com.utbm.ia54.aco.ClearNodes
import com.utbm.ia54.aco.TspInputFile
import com.utbm.ia54.aco.TspPropertyChanged
import com.utbm.ia54.aco.ApplicationClose
import com.utbm.ia54.aco.DisplayIteration
import com.utbm.ia54.aco.AckDisplayNodes
import com.utbm.ia54.aco.AckDisplayIteration
import java.util.HashMap
import com.utbm.ia54.aco.java.StringDef

//-----------------------------------------
// AGENTS
//-----------------------------------------
/** 
 * @author Notmoo
 * 
 */
agent DisplayerAgent {
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle
	
	var gui : MainFrame = null
	
	var bestSolutionEver : short[]
	var bestDistEver : double
	var hasBestDistInCache : boolean

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "Displayer"
		
		hasBestDistInCache = false
		
		info("The agent was started.")
		MainFrame.summonGui
		info("Gui has been summoned")
		val task = task("waiting_for_gui_to_init")
		task.every(1000) [
			if (MainFrame.instance !== null) {
				gui = MainFrame.instance
				new DisplayerReady().emit
				gui.addListener(new ITSPDisplayerCallback() {
					def onFileInput(filePath : Path) {
						fireInputFileRequested(filePath)
					}
					
					def onGuiClose {
						fireCloseEvent
					}
					
					def onPropertyChanged(key : String, value : String) {
						fireTspPropertyChangedEvent(key, value)
					}
				})
				var properties = new HashMap<String, String>();
				for(prop : StringDef.getAll){
					properties.put(prop.label, prop.defaulValue)
				}
				
				//XXX
				var sb = new StringBuffer("\nPROPERTIES : \n")
				for(key : properties.keySet){
					sb.append(key).append(" : ").append(properties.get(key)).append("\n")
				}
				info(sb.toString)
				
				gui.properties = properties
				task.cancel
			}
		]
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("DisplayerAgent was stopped.")
	}
	
	on DisplayIteration {
		if (!hasBestDistInCache || occurrence.distance < bestDistEver) {
			hasBestDistInCache = true
			bestDistEver = occurrence.distance
			bestSolutionEver = occurrence.nodes
			gui.displaySolution(occurrence.nbNodes, bestSolutionEver, bestDistEver)
		} else {
			gui.displaySolution(occurrence.nbNodes, bestSolutionEver, bestDistEver, occurrence.nodes,
				occurrence.distance)
		}
		val task = task("delay_ack")
		task.in(1000) [
			new AckDisplayIteration().emit
		]
	}
	
	on DisplayNodes{
		hasBestDistInCache = false
		gui.clearNodes
		gui.displayNodes(occurrence.nbNodes)
		val task = task("delay_ack")
		task.in(1000)[
			new AckDisplayNodes().emit
		]
	}
	
	on ClearSolutions {
		hasBestDistInCache = false
		gui.clearSolutions
	}
	
	on ClearNodes {
		hasBestDistInCache = false
		gui.clearNodes
	}
	
	def fireInputFileRequested(filePath : Path){
		new TspInputFile(filePath).emit
	}
	
	def fireTspPropertyChangedEvent(propId : String, propVal : String){
		new TspPropertyChanged(propId, propVal).emit 	
	}
	
	def fireCloseEvent(){
		new ApplicationClose().emit
		killMe
	}
}
