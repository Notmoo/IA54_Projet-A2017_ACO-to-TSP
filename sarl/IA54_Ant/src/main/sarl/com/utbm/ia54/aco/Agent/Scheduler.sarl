/** 
 * 
 */
package com.utbm.ia54.aco.Agent

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import com.utbm.ia54.aco.Updated
import com.utbm.ia54.aco.AntCreated
import com.utbm.ia54.aco.RequestUpdate
import com.utbm.ia54.aco.AntFinished
import com.utbm.ia54.aco.IterationFinished
import com.utbm.ia54.aco.SimpleIterationStart
import com.utbm.ia54.aco.TWUpdated
import com.utbm.ia54.aco.TWIterationStart
import com.utbm.ia54.aco.TspPropertyChanged
import com.utbm.ia54.aco.ApplicationClose

/** 
 * @author Mara
 */
agent Scheduler {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	var nbAnts : int
	var nbAntsAck : int
	var nbAntsCreated : int
	
	var firstNodeId : short
	var lastNodeId : short
	
	var pheromoneImportanceFactor : float
	var distanceImportanceFactor : float

	on Initialize {
		loggingName = "Scheduler"
		info("The agent was started.")
		
		if (!occurrence.parameters.isEmpty) {
			nbAnts = occurrence.parameters.get(0) as Integer
		}

		nbAntsAck = 0;
		nbAntsCreated = 0;
		
		firstNodeId = (-1) as short 
		lastNodeId = (-1) as short
		
		pheromoneImportanceFactor = 1f
		distanceImportanceFactor = 1f
		
		for (var i = 0; i < nbAnts; i++) {
			spawn(AntAgent, i);
		}
	}
	
	on Updated {
		info("Simple iteration started")
		var env = occurrence.env
		var nbNodes = occurrence.nbNodes

		var newEvent = new SimpleIterationStart(nbNodes, env, (-1) as short, (-1) as short)
		emit(newEvent)
	}
	
	on TWUpdated {
		new TWIterationStart(
			occurrence.nbNodes,
			occurrence.env,
			 (-1) as short, 
			 (-1) as short, 
			 occurrence.timeWindows, 
			 occurrence.timeStamp
		).emit
	}
	
	on AntCreated {
		nbAntsCreated ++
		if (nbAntsCreated >= nbAnts) {
			nbAntsCreated = 0;
			emit(new RequestUpdate);	
		}
	}
	
	on AntFinished {
		info("Ant finished")
		nbAntsAck++
		
		if (nbAntsAck >= nbAnts) {
			info("Was last ant")
			nbAntsAck = 0
			emit(new IterationFinished)
		}
	}
	
	on TspPropertyChanged {
		info("Property changed received : " + occurrence.property_id + " -> " + occurrence.property_value)
		switch occurrence.property_id{
			case "number of ants": {
				//TODO uncomment this
				// var temp = Integer.parseInt(occurrence.property_value)
				// nbAnts = temp
				// TODO rebuild toutes les fourmis
			}
			case "first node id": {
				var temp = Short.parseShort(occurrence.property_value)
				if (temp !== lastNodeId || temp === -1) {
					firstNodeId = temp
				}
			}
			case "last node id": {
				var temp = Short.parseShort(occurrence.property_value)
				if(temp!==firstNodeId || temp === -1){
					lastNodeId = temp
				}
			}
			case "pheromone importance factor for ants": {
				var temp = Float.parseFloat(occurrence.property_value)
				pheromoneImportanceFactor = temp
					// TODO rebuild toutes les fourmis
			}
			case "distance importance factor for ants": {
				var temp = Float.parseFloat(occurrence.property_value)
				distanceImportanceFactor = temp
					// TODO rebuild toutes les fourmis
			}
		}
	}
	
	on ApplicationClose{
		killMe
	}
}
