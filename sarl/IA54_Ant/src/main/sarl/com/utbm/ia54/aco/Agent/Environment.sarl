package com.utbm.ia54.aco.Agent

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Behaviors
import com.utbm.ia54.aco.SimpleTSPEnvironment
import com.utbm.ia54.aco.TWTSPEnvironment
import com.utbm.ia54.aco.NewEnvironment
import io.sarl.core.DefaultContextInteractions
import com.utbm.ia54.aco.TspInputFile
import com.utbm.ia54.aco.ApplicationClose
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import parser.FileParser
import com.utbm.ia54.aco.AntCreated
import com.utbm.ia54.aco.AntCreatedAck

/** 
 * @author Mara
 */
 
agent Environment {
	uses Behaviors, DefaultContextInteractions, Lifecycle, Logging

	var tspVersion : int
	var simpleBehavior : SimpleTSPEnvironment
	var twBehavior : TWTSPEnvironment
	
	var defaultAntNb : int = 5
	
	on Initialize {
		//XXX
		info("The agent environment was started.")
		simpleBehavior = new SimpleTSPEnvironment(this)
		twBehavior = new TWTSPEnvironment(this)
		
		tspVersion = -1
		
		var nbAnts : int
		if (!occurrence.parameters.isEmpty) {
			nbAnts = occurrence.parameters.get(0) as Integer
			if (nbAnts <= 0) {
				nbAnts = defaultAntNb
				error("Number of Ants specified but invalid, took " + nbAnts)
			}
		} else {
			nbAnts = defaultAntNb
			error("Number of Ants not specified, took " + nbAnts)
		}

		spawn(Scheduler, nbAnts)
		spawn(DisplayerAgent)
	}

	on TspInputFile {
		//XXX
		info("TSP FILE EVENT RECEIVED")
		var envData = FileParser.loadEnv(occurrence.path.toString)
		if (tspVersion != envData.tspVersionNb) {
			if (envData.tspVersionNb === 0) {
				// XXX
				info("behavior registered")
				simpleBehavior.registerBehavior
				if(tspVersion===2)
					twBehavior.unregisterBehavior
			} else if (envData.tspVersionNb === 1) {
				simpleBehavior.registerBehavior
				if (tspVersion === 2)
					twBehavior.unregisterBehavior
			} else if (envData.tspVersionNb === 2) {
				twBehavior.registerBehavior
				if (tspVersion === 0 || tspVersion === 1)
					simpleBehavior.unregisterBehavior
			}
			tspVersion = envData.tspVersionNb
		}
		if (tspVersion === 0 || tspVersion === 1) {
			new NewEnvironment(envData.env, envData.nbNodes).emit
			//XXX
			info("NewEnv event sent")
		}else if (tspVersion === 2) {
			// TODO résoudre le problème de mapping avec le param 'envData.timeWindow'
			//new NewTWEnvironment(envData.env, envData.nbNodes, envData.timeWindow, envData.initialTimeStamp).emit[it.UUID === this.ID]
		}	
	}
	
	on ApplicationClose{
		killMe
	}

	on AntCreated {
		new AntCreatedAck().emit[it.UUID === occurrence.source.UUID]
	}

	on Destroy {
	}
}
