package com.utbm.ia54.aco

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import parser.FileParser
import com.utbm.ia54.aco.AntCreated
import com.utbm.ia54.aco.AntCreatedAck

/** 
 * @author Mara
 */
 
agent Environment {
	uses Logging, Lifecycle, DefaultContextInteractions
	
	/***********************************************************************/
	 
	var env : float[][][] //trois dim, a voir avec Cess pour implémenter ce qu'il a fait
	var nbNodes : short
	var nbAnts : int // nombre de fourmie
	var Q = 1 // valeur a régler
	
	var alpha = 1 // Variable pour l'importance de la distance
	var betha = 0.5f // Variable pour l'évaporation
	
	var solution : float[][]
	var distanceMin : double
	
	/***********************************************************************/

	var tspVersion : int
	var simpleBehavior : SimpleTSPEnvironment
	var twBehavior : TWTSPEnvironment
	
	var defaultAntNb : int = 5
	
	on Initialize {
		//XXX
		info("The agent environment was started.")
		simpleBehavior = new SimpleTSPEnvironment(this)
		twBehavior = new TWTSPEnvironment(this)
		
		if (!occurrence.parameters.isEmpty) {
			nbAnts = occurrence.parameters.get(0) as Integer
			if (nbAnts <= 0) {
				nbAnts = defaultAntNb
				error("Number of Ants specified but invalid, took " + nbAnts)
			}
		} else {
			nbAnts = defaultAntNb
			error("Number of Ants not specified, took " + nbAnts)
		}
		
		spawn(Scheduler, nbAnts) // nbAnts à passer en paramètre

		distanceMin = 0
	}
	
	on NewEnvironment {
		sendToZero()
		env = occurrence.env
		nbNodes = occurrence.nbNodes
		distanceMin = 0
		
		emit(new Updated(env, nbNodes))
	}

	on TspInputFile {
		//XXX
		info("TSP FILE EVENT RECEIVED")
		var envData = FileParser.loadEnv(occurrence.path.toString)
		if (tspVersion != envData.tspVersionNb) {
			if (envData.tspVersionNb === 0) {
				// XXX
				info("behavior registered")
				simpleBehavior.registerBehavior
				if(tspVersion===2)
					twBehavior.unregisterBehavior
			} else if (envData.tspVersionNb === 1) {
				simpleBehavior.registerBehavior
				if (tspVersion === 2)
					twBehavior.unregisterBehavior
			} else if (envData.tspVersionNb === 2) {
				twBehavior.registerBehavior
				if (tspVersion === 0 || tspVersion === 1)
					simpleBehavior.unregisterBehavior
			}
			tspVersion = envData.tspVersionNb
		}
		if (tspVersion === 0 || tspVersion === 1) {
			new NewEnvironment(envData.env, envData.nbNodes).emit
			//XXX
			info("NewEnv event sent")
		}else if (tspVersion === 2) {
			// TODO résoudre le problème de mapping avec le param 'envData.timeWindow'
			//new NewTWEnvironment(envData.env, envData.nbNodes, envData.timeWindow, envData.initialTimeStamp).emit[it.UUID === this.ID]
		}	
	}
	
	on TspPath {
		var senderID = occurrence.source.UUID
		
		var newDist = occurrence.distance
		
		if(distanceMin == 0 || distanceMin > newDist){
			distanceMin = newDist
		}
		
		updateSolution(occurrence.nodes, occurrence.nbNodes);

		emit(new AckSolution)[it.UUID == senderID]	
	}
	
	on IterationFinished{
		updateEnvironment()
	}
	
	/***********************************************************************/
	
	def updateSolution(nodes : short[], nbNode : short){
		for (var i = 0; i < nbNode - 1; i++){
			var beginNode = nodes.get(i)
			var finishNode = nodes.get(i+1)

			var value = solution.get(beginNode).get(finishNode) + 1
			
			solution.get(beginNode).set(finishNode, value)
		}		
	}
	
	def updateEnvironment(){
		for (var i = 0; i< nbNodes ; i++){
			for (var j = 0; j<nbNodes; j++){
				env.get(i).get(j).set(1, betha * (env.get(i).get(j).get(1) + alpha * solution.get(i).get(j)/env.get(i).get(j).get(0)))
			}
		}
	}
	
	def sendToZero(){
		for (var i = 0; i < nbNodes; i++) {
			for (var j = 0; j < nbNodes; j++){
				solution.get(i).set(j, 0f)
			}
		}
	}
}
