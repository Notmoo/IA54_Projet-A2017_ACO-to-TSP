package com.utbm.ia54.aco

import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import com.utbm.ia54.aco.Agent.Scheduler
import java.util.UUID
import com.utbm.ia54.aco.java.ArrayFactory
import parser.FileParser

abstract behavior AbstractTSPEnvironment {
	uses Logging, Lifecycle, DefaultContextInteractions
	/********************************************************************** 
	 */
	protected var env : float[][][] // trois dim, a voir avec Cess pour implémenter ce qu'il a fait
	protected var nbNodes : short
	protected var nbAnts : int // nombre de fourmie
	protected var Q = 1 // valeur a régler
	protected var alpha = 1 // Variable pour l'importance de la distance
	protected var betha = 0.5f // Variable pour l'évaporation
	protected var defaultPheromoneLevel : float = 1.0f
	
	
	protected var solution : float[][]
	protected var distanceMin : double

	/********************************************************************** 
	 */
	on Initialize {
		loggingName = "Environment"

		if (!occurrence.parameters.isEmpty) {
			nbAnts = occurrence.parameters.get(0) as Integer
		}

		spawn(Scheduler, nbAnts) // nbAnts à passer en paramètre
		distanceMin = -1
		Q = 1
		alpha = 1
		betha = 0.5f
		
	}

	on Destroy {
	}

	on com.utbm.ia54.aco.RequestUpdate {
		sendToZero()
		if (env.isEmpty) {
			var senderID = occurrence.source.getUUID
			sendUpdateEvent(senderID)
		}
	}

	on com.utbm.ia54.aco.TspPath {
		var senderID = occurrence.source.getUUID

		var newDist = occurrence.distance

		if (distanceMin === -1 || distanceMin > newDist) {
			distanceMin = newDist
		}

		updateSolution(occurrence.nodes, occurrence.nbNodes);

		emit(new com.utbm.ia54.aco.AckSolution)[it.getUUID == senderID]
	}

	on com.utbm.ia54.aco.IterationFinished {
		updateEnvironment()
	}

	on AntCreated {
		new AntCreatedAck().emit[it.UUID === occurrence.source.UUID]
	}
	/********************************************************************** 
	 */
	def updateSolution(nodes : short[], nbNode : short) {
		for (var i = 0; i < nbNode - 1; i++) {
			var beginNode = nodes.get(i)
			var finishNode = nodes.get(i + 1)

			var value = solution.get(beginNode).get(finishNode) + 1

			solution.get(beginNode).set(finishNode, value)
		}
	}

	def updateEnvironment() {
		for (var i = 0; i < nbNodes; i++) {
			for (var j = 0; j < nbNodes; j++) {
				env.get(i).get(j).set(1,
					betha * (env.get(i).get(j).get(1) + alpha * solution.get(i).get(j) / env.get(i).get(j).get(0)))
			}
		}
	}

	def sendToZero() {
		for (var i = 0; i < nbNodes; i++) {
			for (var j = 0; j < nbNodes; j++) {
				solution.get(i).set(j, 0f)
			}
		}
	}

	def abstract sendUpdateEvent()
	def abstract sendUpdateEvent(uuid : UUID)
}

behavior SimpleTSPEnvironment extends AbstractTSPEnvironment {
	uses DefaultContextInteractions
	
	def sendUpdateEvent {
		new Updated(env, nbNodes).emit
	}
	
	def sendUpdateEvent(uuid : UUID) {
		new Updated(env, nbNodes).emit[it.UUID === uuid]
	}

	on com.utbm.ia54.aco.NewEnvironment [isFromMe] {
		sendToZero()
		env = occurrence.env
		nbNodes = occurrence.nbNodes
		distanceMin = 0

		sendUpdateEvent
	}
}

behavior TWTSPEnvironment extends AbstractTSPEnvironment {
	uses DefaultContextInteractions
	
	protected var timeWindow : float[][]
	protected var initialTime : float
	
	on Initialize {
		timeWindow = ArrayFactory.newEnvFloat2DMatrix(nbNodes)
		initialTime = 0 as float
	}
	
	def sendUpdateEvent {
		new TWUpdated(env, nbNodes, timeWindow, initialTime).emit
	}
	
	def sendUpdateEvent(uuid : UUID) {
		new TWUpdated(env, nbNodes, timeWindow, initialTime).emit[it.UUID === uuid]
	}

	on com.utbm.ia54.aco.NewTWEnvironment [isFromMe] {
		sendToZero()
		env = occurrence.env
		nbNodes = occurrence.nbNodes
		distanceMin = 0

		sendUpdateEvent
	}
}